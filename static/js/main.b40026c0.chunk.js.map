{"version":3,"sources":["hooks/useJsonFetch.js","components/Fetch.js","App.js","serviceWorker.js","index.js"],"names":["useJsonFetch","url","useState","data","setData","error","setError","loading","setLoading","useEffect","a","fetch","response","json","ok","status","fetchData","Fetch","props","console","log","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0RA6BeA,EA3BM,SAACC,GAAS,IAAD,EACJC,mBAAS,MADL,mBACrBC,EADqB,KACfC,EADe,OAEFF,mBAAS,MAFP,mBAErBG,EAFqB,KAEdC,EAFc,OAGEJ,oBAAS,GAHX,mBAGrBK,EAHqB,KAGZC,EAHY,KAwB5B,OAnBAC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,6DAChBF,GAAW,GADK,kBAGSG,MAAMV,GAHf,cAGRW,EAHQ,gBAIKA,EAASC,OAJd,OAIRV,EAJQ,OAKVS,EAASE,IACXV,EAAQD,EAAKY,QACbT,EAAS,OAETA,EAASH,EAAKY,QATF,uBAYdP,GAAW,GAZG,yEAAH,qDAefQ,KACC,CAACf,IAEG,CAACE,EAAMI,EAASF,ICHVY,EAlBD,SAACC,GAAW,IAAD,EACQlB,EAAakB,EAAMjB,KAD3B,mBAChBE,EADgB,KACVI,EADU,KACDF,EADC,KAIvB,OAFAc,QAAQC,IAAIF,EAAMjB,IAAKE,EAAMI,EAASF,GAGpC,6BACE,mCAASa,EAAMjB,KACf,oCAAUE,GACV,qCAAWE,GACX,uCAAaE,EAAU,OAAS,WCOvBc,MAhBf,WACE,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,sBAAf,KAA4C,IAC5C,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,qBAAf,KAA2C,KACtC,IACP,yBAAKA,UAAU,UACb,kBAAC,EAAD,CAAOrB,IAAI,+BACX,kBAAC,EAAD,CAAOA,IAAI,gCACX,kBAAC,EAAD,CAAOA,IAAI,mCACN,MCJOsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLc,QAAQd,MAAMA,EAAMmC,a","file":"static/js/main.b40026c0.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useJsonFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        if (response.ok) {\n          setData(data.status);\n          setError(null);\n        } else {\n          setError(data.status);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n\n  return [data, loading, error];\n};\n\nexport default useJsonFetch;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useJsonFetch from \"../hooks/useJsonFetch\";\n\nconst Fetch = (props) => {\n  const [data, loading, error] = useJsonFetch(props.url);\n  console.log(props.url, data, loading, error);\n\n  return (\n    <div>\n      <p>URL: {props.url}</p>\n      <p>DATA: {data}</p>\n      <p>ERROR: {error}</p>\n      <p>LOADING: {loading ? \"true\" : \"false\"}</p>\n    </div>\n  );\n};\n\nFetch.propTypes = {\n  url: PropTypes.string,\n};\n\nexport default Fetch;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Fetch from \"./components/Fetch\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"background-element\"> </div>{\" \"}\n      <div className=\"highlight-window\">\n        <div className=\"highlight-overlay\"> </div>{\" \"}\n      </div>{\" \"}\n      <div className=\"window\">\n        <Fetch url=\"http://localhost:7070/data\" />\n        <Fetch url=\"http://localhost:7070/error\" />\n        <Fetch url=\"http://localhost:7070/loading\" />\n      </div>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}